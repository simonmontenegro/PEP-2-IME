#Se guarda la columna peso para utilizarla mas adelante.
peso <- muestra_mujeres["Weight"]
#Se obtienen las 8 variables
muestra_mujeres["Weight"] <- NULL
columnas_muestra <- colnames(muestra_mujeres)
predictores_aleatorios <- sample(columnas_muestra,8)
# CUARTO PASO
# Se seleciona una variable predictora de las otras retantes
# que podría ser útil para predecir la variable peso ("Weight")
#Se almacenan los posibles predictores que pueden ser seleccionados
predictores_posibles <- setdiff(columnas_muestra, predictores_aleatorios)
#Se acota el data.frame solo con los predictores a seleccionar
muestra_mujeres <- muestra_mujeres[predictores_posibles]
#Se realiza el ajuste del modelo nulo y completo (será utilizado para el cuarto paso)
#Para ello, se agrega nuevamente la columna peso
muestra_mujeres <- cbind(muestra_mujeres, peso)
nulo <- lm(Weight ~ 1, data = datos_filtrados)
completo <- lm(Weight ~ ., data = muestra_mujeres)
#Para ello se realiza un ajuste con selección hacia delante
adelante <- step(nulo, scope = list(upper = completo), direction = "forward",
trace = 1, steps = 2)
#Con lo anterior, se tiene que una variable predictora adecuada es
# "Waist.Girth" (Grosor a la altura de la cintura). Esto dado que es la variable
# que presenta menor AIC, lo que significa que es la variable que penaliza en
# menor medida el modelo (genera un mejor modelo).
#Esta selección se realizó en el dominio de predictores que no están
#en los 8 seleccionados aleatoriamente ni tampoco los predictores Gender y Weight.
#Adicionalmente, con la función cor se obtiene el nivel de correlación que existe
# entre las variables del data.frame, así, se ve que Waist.Girth presenta la
# correlación mas fuerte con Weight, esto motiva aún mas a seleccionar dicha variable
# como predictor del modelo.
correlaciones <- round(cor(x = muestra_mujeres, method = "pearson"), 3)
# QUINTO PASO
# Posteriormente, se construye un modelo de regresión simple con el
# predictor seleccionado en el paso anterior:
#Se construye el modelo
modelo <- lm(Weight ~ Waist.Girth, data = muestra_mujeres)
print(summary(modelo))
#Se grafica el modelo.
g <- ggscatter(muestra_mujeres, x = "Waist.Girth", y = "Weight", color = "blue",
xlab = "Grosor a la altura de la cintura", ylab = "Peso")
print(g)
#Se crea un nuevo modelo con las 8 variables aleatorias seleccionadas
muestra_mujeres_2 <- datos_filtrados
View(muestra_mujeres_2)
waist <- muestra_mujeres_2["Waist.Girth"]
waist <- muestra_mujeres_2["Waist.Girth"]
muestra_mujeres_2["Weight"] <- NULL
#Se acota el data.frame solo con los predictores a seleccionar
muestra_mujeres_2 <- muestra_mujeres_2[predictores_aleatorios]
View(muestra_mujeres_2)
View(datos_filtrados)
View(datos)
View(waist)
muestra_mujeres_2 <- cbind(muestra_mujeres_2, peso)
View(muestra_mujeres_2)
muestra_mujeres_2 <- cbind(muestra_mujeres_2, waist)
completo_2 <- lm(Weight ~ ., data = muestra_mujeres_2)
#Para ello se realiza un ajuste con selección hacia delante
adelante_2 <- step(modelo, scope = list(upper = completo_2), direction = "forward",
trace = 1)
View(completo_2)
completo_2 <- lm(Weight ~ ., data = muestra_mujeres_2)
View(modelo)
modelo_2 <- lm(Weight ~ Waist.Girth, data = muestra_mujeres_2)
View(modelo_2)
print(summary(modelo_2))
print(summary(modelo_2))
#Se grafica el modelo.
g_2 <- ggscatter(muestra_mujeres_2, x = "Waist.Girth", y = "Weight", color = "blue",
xlab = "Grosor a la altura de la cintura", ylab = "Peso")
print(g_2)
print(summary(modelo_2))
#Se grafica el modelo.
g_2 <- ggscatter(muestra_mujeres_2, x = "Waist.Girth", y = "Weight", color = "blue",
xlab = "Grosor a la altura de la cintura", ylab = "Peso")
print(g_2)
#Se grafica el modelo.
g <- ggscatter(muestra_mujeres, x = "Waist.Girth", y = "Weight", color = "blue",
xlab = "Grosor a la altura de la cintura", ylab = "Peso")
print(g)
completo_2 <- lm(Weight ~ ., data = muestra_mujeres_2)
#Para ello se realiza un ajuste con selección hacia delante
adelante_2 <- step(modelo_2, scope = list(upper = completo_2), direction = "forward",
trace = 1)
modelo <- update(modelo, . ~ . + Thigh.Girth + Wrists.diameter + Calf.Maximum.Girth + Shoulder.Girth)
modelo <- update(modelo_2, . ~ . + Thigh.Girth + Wrists.diameter + Calf.Maximum.Girth + Shoulder.Girth)
View(modelo)
modelo_final <- update(modelo_2, . ~ . + Thigh.Girth + Wrists.diameter + Calf.Maximum.Girth + Shoulder.Girth)
step(modelo_final, scope = list(upper = completo_2), direction = "forward",
trace = 1)
modelo_final <- update(modelo_2, . ~ . + Thigh.Girth + Wrists.diameter +
Calf.Maximum.Girth + Shoulder.Girth)
source("C:/Users/cuchu/Desktop/IME/Actividades/Actividad 12/EP012-respuesta-sala-1.R")
print(durbinWatsonTest(modelo_final))
library(car)
print(durbinWatsonTest(modelo_final))
#Comprobación de independencia de los residuos.
cat("Prueba de Durbin-Watson para autocorrelaciones.")
cat("entre errores:\n")
print(durbinWatsonTest(modelo_final))
#Comprobación de normalidad de los residuos.
cat("\nPrueba de normalidad para los residuos:\n")
print(shapiro.test(modelo_final$residuals))
#Comprobación de homocedasticidad de los residuos.
cat("\nPrueba de homocedasticidad para los residuos:\n")
print(ncvTest(modelo_final))
#Comprobación de multicolinealidad
vifs <- vif(modelo_final)
cat("\nVerificar la multicolinealidad:\n")
cat("- VIFs: \n")
print(vifs)
cat("- Tolerancias:\n")
print(1 / vifs)
cat("- VIF medio:", mean(vifs), "\n")
print(drop1(completo_2, scope = completo_2))
#Para ello se realiza un ajuste con selección hacia delante
adelante_2 <- step(modelo_2, scope = list(upper = completo_2), direction = "forward",
trace = 1)
modelo_final_2 <- update(modelo_2, . ~ . - Shoulder.Girth)
step(modelo_final_2, scope = list(upper = completo_2), direction = "forward",
trace = 1)
#Comprobación de multicolinealidad
vifs <- vif(modelo_final_2)
cat("\nVerificar la multicolinealidad:\n")
cat("- VIFs: \n")
print(vifs)
cat("- Tolerancias:\n")
print(1 / vifs)
cat("- VIF medio:", mean(vifs), "\n")
modelo_final_corregido <- update(modelo_final, . ~ .  -Shoulder.Girth)
#Comprobación de multicolinealidad
vifs <- vif(modelo_final_corregido)
cat("\nVerificar la multicolinealidad:\n")
cat("- VIFs: \n")
print(vifs)
cat("- Tolerancias:\n")
print(1 / vifs)
cat("- VIF medio:", mean(vifs), "\n")
modelo_final_corregido <- update(modelo_final, . ~ .  -Shoulder.Girth - Calf.Maximum.Girth)
#Comprobación de multicolinealidad
vifs <- vif(modelo_final_corregido)
cat("\nVerificar la multicolinealidad:\n")
cat("- VIFs: \n")
print(vifs)
cat("- Tolerancias:\n")
print(1 / vifs)
cat("- VIF medio:", mean(vifs), "\n")
modelo_final_corregido <- update(modelo_final, . ~ .  -Shoulder.Girth - Calf.Maximum.Girth - Wrists.diameter)
#Comprobación de multicolinealidad
vifs_corregido <- vif(modelo_final_corregido)
cat("\nVerificar la multicolinealidad:\n")
cat("- VIFs: \n")
print(vifs_corregido)
cat("- Tolerancias:\n")
print(1 / vifs_corregido)
cat("- VIF medio:", mean(vifs_corregido), "\n")
modelo_final_corregido <- update(modelo_final, . ~ .  -Shoulder.Girth - Calf.Maximum.Girth)
#Comprobación de multicolinealidad
vifs_corregido <- vif(modelo_final_corregido)
cat("\nVerificar la multicolinealidad:\n")
cat("- VIFs: \n")
print(vifs_corregido)
cat("- Tolerancias:\n")
print(1 / vifs_corregido)
cat("- VIF medio:", mean(vifs_corregido), "\n")
source("C:/Users/cuchu/Desktop/IME/Actividades/Actividad 12/EP012-respuesta-sala-1.R")
#Se construye el modelo
modelo <- lm(Weight ~ Waist.Girth, data = muestra_mujeres)
print(summary(modelo))
#Se grafica el modelo.
g <- ggscatter(muestra_mujeres, x = "Waist.Girth", y = "Weight", color = "blue",
xlab = "Grosor a la altura de la cintura", ylab = "Peso")
print(g)
print(modelo)
print(summary(modelo))
#Para ello se realiza un ajuste con selección hacia delante
adelante_2 <- step(modelo_2, scope = list(upper = completo_2), direction = "forward",
trace = 1)
correlaciones <- round(cor(x = muestra_mujeres, method = "pearson"), 3)
correlaciones
#Comprobación de la distribución de los residuos (aproxima a la normal)
cat("Prueba de normalidad para los residuos\n")
print(shapiro.test(modelo$residuals))
#Comprobación de la variabilidad de los puntos entorno a la línea de mínimos cuadrados
# debe ser aproximadamente constante.
g <- ggscatter(muestra_mujeres, x = "Waist.Girth", y = "Weight", color = "blue",
xlab = "Grosor a la altura de la cintura", ylab = "Peso")
g <- g + geom_hline(yintercept = 0, colour = "red")
print(g)
#Comprobación de la variabilidad de los puntos entorno a la línea de mínimos cuadrados
# debe ser aproximadamente constante.
g <- ggscatter(muestra_mujeres, x = "Waist.Girth", y = "Weight", color = "blue", fill = "blue",
xlab = "Grosor a la altura de la cintura", ylab = "Peso")
g <- g + geom_hline(yintercept = 0, colour = "red")
print(g)
source("C:/Users/cuchu/Desktop/IME/Actividades/Actividad 12/EP012-respuesta-sala-1.R")
#Comprobación de la variabilidad de los puntos entorno a la línea de mínimos cuadrados
# debe ser aproximadamente constante.
cat("\nPrueba de homocedasticidad para los residuos:\n")
print(ncvTest(modelo))
#Comprobación de la variabilidad de los puntos entorno a la línea de mínimos cuadrados
# debe ser aproximadamente constante.
g <- ggscatter(muestra_mujeres, x = "Waist.Girth", y = "Residuos", color = "blue", fill = "blue",
xlab = "Grosor a la altura de la cintura", ylab = "Peso")
g <- g + geom_hline(yintercept = 60, colour = "red")
print(g)
#Comprobación de la variabilidad de los puntos entorno a la línea de mínimos cuadrados
# debe ser aproximadamente constante.
g <- ggscatter(muestra_mujeres, x = "Waist.Girth", y = "Residuos", color = "blue", fill = "blue",
xlab = "Grosor a la altura de la cintura", ylab = "Peso")
g <- g + geom_hline(yintercept = 10, colour = "red")
print(g)
#Comprobación de la variabilidad de los puntos entorno a la línea de mínimos cuadrados
# debe ser aproximadamente constante.
g <- ggscatter(muestra_mujeres, x = "Waist.Girth", y = "Residuos", color = "blue", fill = "blue",
xlab = "Grosor a la altura de la cintura", ylab = "Peso")
g <- g + geom_hline(yintercept = 0, colour = "red")
print(g)
#Comprobación de la variabilidad de los puntos entorno a la línea de mínimos cuadrados
# debe ser aproximadamente constante.
g <- ggscatter(muestra_mujeres, x = "Waist.Girth", y = "Residuos", color = "blue", fill = "blue",
xlab = "Grosor a la altura de la cintura", ylab = "Peso")
g <- g + geom_hline(yintercept = 0, colour = "red")
print(g)
source("C:/Users/cuchu/Desktop/IME/Actividades/Actividad 12/EP012-respuesta-sala-1.R")
source("C:/Users/cuchu/Desktop/IME/Actividades/Actividad 12/EP012-respuesta-sala-1.R")
g <- ggscatter(muestra_mujeres, x = "Waist.Girth", y = "residuos", color = "blue", fill = "blue",
xlab = "Grosor a la altura de la cintura", ylab = "Peso")
g <- g + geom_hline(yintercept = 0, colour = "red")
print(g)
g <- ggscatter(muestra_mujeres, x = "Waist.Girth", y = "Weight", color = "blue", fill = "blue",
xlab = "Grosor a la altura de la cintura", ylab = "Peso")
g <- g + geom_hline(yintercept = 0, colour = "red")
print(g)
#Comprobación de la variabilidad de los puntos entorno a la línea de mínimos cuadrados
# debe ser aproximadamente constante.
g <- ggscatter(muestra_mujeres, x = "Waist.Girth", y = "Weight", color = "blue", fill = "blue",
xlab = "Grosor a la altura de la cintura", ylab = "Peso")
g <- g + geom_hline(yintercept = 65, colour = "red")
print(g)
#Comprobación de la variabilidad de los puntos entorno a la línea de mínimos cuadrados
# debe ser aproximadamente constante.
g <- ggscatter(muestra_mujeres, x = "Waist.Girth", y = "Weight", color = "blue", fill = "blue",
xlab = "Grosor a la altura de la cintura", ylab = "Peso")
g <- g + geom_hline(yintercept = 60, colour = "red")
print(g)
cat("\nPrueba de homocedasticidad para los residuos:\n")
print(ncvTest(modelo))
print(ncvTest(modelo$residuals))
cat("\nPrueba de homocedasticidad para los residuos:\n")
print(ncvTest(modelo))
#Comprobación de homocedasticidad de los residuos.
cat("\nPrueba de homocedasticidad para los residuos:\n")
print(ncvTest(modelo_final))
g <- ggscatter(muestra_mujeres, x = "Waist.Girth", y = "residuals", color = "blue", fill = "blue",
xlab = "Grosor a la altura de la cintura", ylab = "Peso")
g <- g + geom_hline(yintercept = 60, colour = "red")
print(g)
#Comprobación de la variabilidad de los puntos entorno a la línea de mínimos cuadrados
# debe ser aproximadamente constante.
b_1 <- modelo$coefficients[2]
b_0 <- modelo$coefficients[1]
residuos <- muestra_mujeres[["Weight"]] - (b_1 * muestra_mujeres[["Waist.Girth"]] + b_0)
muestra_mujeres <- data.frame(muestra_mujeres, residuos)
g <- ggscatter(muestra_mujeres, x = "Waist.Girth", y = "residuos", color = "blue", fill = "blue",
xlab = "Grosor a la altura de la cintura", ylab = "Residuos")
g <- g + geom_hline(yintercept = 0, colour = "red")
print(g)
library(lmtest)
bptest(modelo)
source("C:/Users/cuchu/Desktop/IME/Actividades/Actividad 12/EP012-respuesta-sala-1.R")
correlaciones <- round(cor(x = muestra_mujeres, method = "pearson"), 3)
correlaciones
modelo_final_corregido <- update(modelo_final, . ~ .  -Shoulder.Girth - Calf.Maximum.Girth)
print(modelo_final_corregido)
correlaciones_2 <- round(cor(x = muestra_mujeres_2, method = "pearson"), 3)
correlaciones_2
# (o utilizando validación cruzada)
n <- nrow(muestra_mujeres_2)
n_entrenamiento <- floor(0.7 * n)
muestra <- sample.int(n=n, size=n_entrenamiento, replace = F)
entrenamiento <- muestra_mujeres_2[muestra, ]
prueba <- muestra_mujeres_2[-muestra]
modelo_cruzada <- train(Weight ~ Waist.Girth, data = entrenamiento, method = "lm",
trControl = trainControl(method = "cv", number = 5))
print(summary(modelo_cruzada))
library(caret)
n <- nrow(muestra_mujeres_2)
n_entrenamiento <- floor(0.7 * n)
muestra <- sample.int(n=n, size=n_entrenamiento, replace = F)
entrenamiento <- muestra_mujeres_2[muestra, ]
prueba <- muestra_mujeres_2[-muestra]
modelo_cruzada <- train(Weight ~ Waist.Girth, data = entrenamiento, method = "lm",
trControl = trainControl(method = "cv", number = 5))
print(summary(modelo_cruzada))
modelo_cruzada <- train(Weight ~ Waist.Girth, data = entrenamiento, method = "lm")
print(summary(modelo_cruzada))
source("C:/Users/cuchu/Desktop/IME/Actividades/Actividad 12/EP012-respuesta-sala-1.R")
#Se crea el conjunto de entrenamiento para la validación.
n <- nrow(muestra_mujeres_2)
n_entrenamiento <- floor(0.8 * n)
muestra <- sample.int(n=n, size=n_entrenamiento, replace = F)
entrenamiento <- muestra_mujeres_2[muestra, ]
prueba <- muestra_mujeres_2[-muestra]
modelo_cruzada <- train(Weight ~ Waist.Girth, data = entrenamiento, method = "lm")
print(summary(modelo_cruzada))
Se obtiene el MSE (error cuadrado medio) para el conjunto entranmiento
mse_entrenamiento <- modelo_final_corregido$resultsRMSE
#Se obtiene el MSE (error cuadrado medio) para el conjunto entranmiento
mse_entrenamiento <- modelo_final_corregido$resultsRMSE
#Se obtiene el MSE (error cuadrático medio) para el conjunto entrenamiento.
mse_entrenamiento <- modelo_final_corregido$resultsRMSE
#Se realizan las predicciones
prediccionesRLM <- predict(modelo_final_corregido, prueba)
#Se calcula el error cuadrático medio para el conjunto de prueba.
error <- prueba[["Weight"]] - prediccionesRLM
mse_prueba <- mean(error ** 2)
#Se obtiene el MSE (error cuadrático medio) para el conjunto entrenamiento.
mse_entrenamiento <- modelo_final_corregido$resultsRMSE
#Se realizan las predicciones
prediccionesRLM <- predict(modelo_final_corregido, prueba)
modelo_cruzada <- train(Weight ~ Waist.Girth + Thigh.Girth + Wrists.diameter, data = entrenamiento, method = "lm")
print(summary(modelo_cruzada))
#Se obtiene el MSE (error cuadrático medio) para el conjunto entrenamiento.
mse_entrenamiento <- modelo_final_corregido$resultsRMSE
#Se realizan las predicciones
prediccionesRLM <- predict(modelo_final_corregido, prueba)
#Se calcula el error cuadrático medio para el conjunto de prueba.
error <- prueba[["Weight"]] - prediccionesRLM
mse_prueba <- mean(error ** 2)
source("C:/Users/cuchu/Desktop/IME/Actividades/Actividad 12/EP012-respuesta-sala-1.R")
#Se crea el conjunto de entrenamiento para la validación.
n <- nrow(muestra_mujeres)
n_entrenamiento <- floor(0.8 * n)
muestra <- sample.int(n=n, size=n_entrenamiento, replace = F)
entrenamiento <- muestra_mujeres[muestra, ]
prueba <- muestra_mujeres[-muestra]
modelo_cruzada <- train(Weight ~ Waist.Girth, data = entrenamiento, method = "lm")
print(summary(modelo_cruzada))
#Se obtiene el MSE (error cuadrático medio) para el conjunto entrenamiento.
mse_entrenamiento <- modelo_final_corregido$resultsRMSE
#Se realizan las predicciones
prediccionesRLM <- predict(modelo_final_corregido, prueba)
#Se calcula el error cuadrático medio para el conjunto de prueba.
error <- prueba[["Weight"]] - prediccionesRLM
mse_prueba <- mean(error ** 2)
source("C:/Users/cuchu/Desktop/IME/Actividades/Actividad 12/EP012-respuesta-sala-1.R")
n <- nrow(muestra_mujeres)
n_entrenamiento <- floor(0.8 * n)
muestra <- sample.int(n=n, size=n_entrenamiento, replace = F)
entrenamiento <- muestra_mujeres[muestra, ]
prueba <- muestra_mujeres[-muestra]
modelo_cruzada <- train(Weight ~ Waist.Girth, data = entrenamiento, method = "lm")
print(summary(modelo_cruzada))
#Se obtiene el MSE (error cuadrático medio) para el conjunto entrenamiento.
mse_entrenamiento <- modelo$resultsRMSE
#Se realizan las predicciones
prediccionesRLM <- predict(modelo, prueba)
#Se calcula el error cuadrático medio para el conjunto de prueba.
error <- prueba[["Weight"]] - prediccionesRLM
mse_prueba <- mean(error ** 2)
source("C:/Users/cuchu/Desktop/IME/Actividades/Actividad 12/EP012-respuesta-sala-1.R")
View(entrenamiento)
View(prueba)
mse_entrenamiento <- modelo_cruzada$resultsRMSE
#Se crea el conjunto de entrenamiento para la validación.
n <- nrow(muestra_mujeres)
n_entrenamiento <- floor(0.8 * n)
muestra <- sample.int(n=n, size=n_entrenamiento, replace = F)
entrenamiento <- muestra_mujeres[muestra, ]
prueba <- muestra_mujeres[-muestra]
modelo_cruzada <- train(Weight ~ Waist.Girth, data = entrenamiento, method = "lm")
print(summary(modelo_cruzada))
#Se obtiene el MSE (error cuadrático medio) para el conjunto entrenamiento.
mse_entrenamiento <- modelo_cruzada$resultsRMSE
#Se realizan las predicciones
prediccionesRLM <- predict(modelo_cruzada, prueba)
source("C:/Users/cuchu/Desktop/IME/Actividades/Actividad 12/EP012-respuesta-sala-1.R")
#Se obtiene el MSE (error cuadrático medio) para el conjunto entrenamiento.
mse_entrenamiento <- modelo_cruzada$results$RMSE
#Se realizan las predicciones
prediccionesRLM <- predict(modelo_cruzada, prueba)
View(prueba)
source("C:/Users/cuchu/Desktop/IME/Actividades/Actividad 12/EP012-respuesta-sala-1.R")
source("C:/Users/cuchu/Desktop/IME/Actividades/Actividad 12/EP012-respuesta-sala-1.R")
source("C:/Users/cuchu/Desktop/IME/Actividades/Actividad 12/EP012-respuesta-sala-1.R")
source("C:/Users/cuchu/Desktop/IME/Actividades/Actividad 12/EP012-respuesta-sala-1.R")
source("C:/Users/cuchu/Desktop/IME/Actividades/Actividad 12/EP012-respuesta-sala-1.R")
source("C:/Users/cuchu/Desktop/IME/Actividades/Actividad 12/EP012-respuesta-sala-1.R")
#Errores
cat("\nError cuadrático medio RLS para entrenamiento: ", mse_entrenamientoRLS, "\n")
cat("\nError cuadrático medio RLS para prueba: ", mse_pruebaRLS, "\n")
cat("\nError cuadrático medio RLM para entrenamiento: ", mse_entrenamientoRLM, "\n")
cat("\nError cuadrático medio RLM para prueba: ", mse_pruebaRLM, "\n")
source("C:/Users/cuchu/Desktop/IME/Actividades/Actividad 12/EP012-respuesta-sala-1.R")
source("C:/Users/cuchu/Desktop/IME/Actividades/Actividad 12/EP012-respuesta-sala-1.R")
source("C:/Users/cuchu/Desktop/IME/Actividades/Actividad 12/EP012-respuesta-sala-1.R")
View(modelo_cruzadaRLS)
View(modelo_cruzadaRLM)
View(modelo_cruzadaRLS)
source("C:/Users/cuchu/Desktop/IME/Actividades/Actividad 12/EP012-respuesta-sala-1.R")
source("C:/Users/cuchu/Desktop/IME/Actividades/Actividad 13/EP13-respuesta-sala-1.R")
source("C:/Users/cuchu/Desktop/IME/Actividades/Actividad 13/EP13-respuesta-sala-1.R")
predictores_aleatorios
predictores_restantes
source("C:/Users/cuchu/Desktop/IME/Actividades/Actividad 13/EP13-respuesta-sala-1.R")
View(muestra_mujeres)
muestra_mujeres <- cbind(muestra_mujeres, enu)
#Se realiza el ajuste del modelo nulo y completo
nulo <- lm(enu ~ 1, data = muestra_mujeres)
completo <- lm(Weight ~ ., data = muestra_mujeres)
#Se realiza un ajuste con selección hacia delante
adelante <- step(nulo, scope = list(upper = completo), direction = "forward",
trace = 1, steps = 2)
#Se realiza el ajuste del modelo nulo y completo
nulo <- lm(EN ~ 1, data = muestra_mujeres)
completo <- lm(EN ~ ., data = muestra_mujeres)
#Se realiza un ajuste con selección hacia delante
adelante <- step(nulo, scope = list(upper = completo), direction = "forward",
trace = 1, steps = 2)
correlaciones <- round(cor(x = muestra_mujeres, method = "pearson"), 3)
correlaciones
#Se construye el modelo
modelo <- lm(EN ~ Thigh.Girthh, data = muestra_mujeres)
print(summary(modelo))
#Se grafica el modelo.
g <- ggscatter(muestra_mujeres, x = "Thigh.Girthh", y = "EN", color = "blue",
xlab = "Grosor promedio de ambos muslos bajo el pliegue del gluteo", ylab = "Estado nutricional")
print(g)
#Se construye el modelo
modelo <- lm(EN ~ Thigh.Girth, data = muestra_mujeres)
print(summary(modelo))
#Se grafica el modelo.
g <- ggscatter(muestra_mujeres, x = "Thigh.Girth", y = "EN", color = "blue",
xlab = "Grosor promedio de ambos muslos bajo el pliegue del gluteo", ylab = "Estado nutricional")
print(g)
predictores_aleatorios
thigh <- muestra_mujeres["Thigh.Girth"]
muestras_mujeres_2 <- datos_filtrados_final[predictores_aleatorios]
View(muestras_mujeres_2)
muestras_mujeres_2 <- cbind(muestras_mujeres_2, thigh, enu)
#Se construye el modelo
modelo <- glm(EN ~ Thigh.Girth, data = muestra_mujeres)
print(summary(modelo))
#Se grafica el modelo.
g <- ggscatter(muestra_mujeres, x = "Thigh.Girth", y = "EN", color = "blue",
xlab = "Grosor promedio de ambos muslos bajo el pliegue del gluteo", ylab = "Estado nutricional")
print(g)
#Se construye el modelo
modelo <- glm(EN ~ Thigh.Girth, data = muestra_mujeres)
print(summary(modelo))
#Se grafica el modelo.
g <- ggscatter(muestra_mujeres, x = "Thigh.Girth", y = "EN", color = "blue",
xlab = "Grosor promedio de ambos muslos bajo el pliegue del gluteo", ylab = "Estado nutricional")
print(g)
#Se crea el nuevo modelo con los dos predictores iniciales (EN y Thigh.Girth)
modelo_2 <- glm(EN ~ Thigh.Girth, data = muestra_mujeres_2)
print(summary(modelo_2))
completo_2 <- lm(EN ~ ., data = muestra_mujeres_2)
#Para ello se realiza un ajuste con selección hacia delante
adelante_2 <- step(modelo_2, scope = list(upper = completo_2), direction = "forward",
trace = 1)
#Se grafica el modelo.
g <- ggscatter(muestra_mujeres, x = "Thigh.Girth", y = "EN", color = "blue",
xlab = "Grosor promedio de ambos muslos bajo el pliegue del gluteo", ylab = "Estado nutricional")
print(g)
#Se utilizarán predictores de los 8 seleccionados aleatoriamente para incorporar al modelo,
# para ello se incorporan "EN" y "Thigh.Girth" nuevamente.
thigh <- muestra_mujeres["Thigh.Girth"]
muestras_mujeres_2 <- datos_filtrados_final[predictores_aleatorios]
muestras_mujeres_2 <- cbind(muestras_mujeres_2, thigh, enu)
#Se crea el nuevo modelo con los dos predictores iniciales (EN y Thigh.Girth)
modelo_2 <- glm(EN ~ Thigh.Girth, data = muestra_mujeres_2)
print(summary(modelo_2))
completo_2 <- lm(EN ~ ., data = muestra_mujeres_2)
View(muestras_mujeres_2)
#Se crea el nuevo modelo con los dos predictores iniciales (EN y Thigh.Girth)
modelo_2 <- glm(EN ~ Thigh.Girth, data = muestras_mujeres_2)
print(summary(modelo_2))
completo_2 <- lm(EN ~ ., data = muestras_mujeres_2)
#Para ello se realiza un ajuste con selección hacia delante
adelante_2 <- step(modelo_2, scope = list(upper = completo_2), direction = "forward",
trace = 1)
#Se crea el nuevo modelo con los dos predictores iniciales (EN y Thigh.Girth)
modelo_2 <- glm(EN ~ Thigh.Girth, data = muestras_mujeres_2)
print(summary(modelo_2))
completo_2 <- glm(EN ~ ., data = muestras_mujeres_2)
#Para ello se realiza un ajuste con selección hacia delante
adelante_2 <- step(modelo_2, scope = list(upper = completo_2), direction = "forward",
trace = 1)
modelo_final <- update(modelo_2, . ~ . + Waist.Girth + Ankle.Minimum.Girth + Hip.Girth)
correlaciones <- round(cor(x = muestra_mujeres, method = "pearson"), 3)
correlaciones
#Comprobación de la distribución de los residuos (aproxima a la normal)
cat("Prueba de normalidad para los residuos\n")
print(shapiro.test(modelo$residuals))
#Comprobación de la variabilidad de los puntos entorno a la línea de mínimos cuadrados
# debe ser aproximadamente constante.
b_1 <- modelo$coefficients[2]
b_0 <- modelo$coefficients[1]
residuos <- muestra_mujeres[["EN"]] - (b_1 * muestra_mujeres[["Thigh.Girth"]] + b_0)
muestra_mujeres_aux <- data.frame(muestra_mujeres, residuos)
g_var <- ggscatter(muestra_mujeres_aux, x = "Thigh.Girth", y = "residuos", color = "blue", fill = "blue",
xlab = "Grosor promedio de ambos muslos bajo el pliegue del gluteo", ylab = "Residuos")
g_var <- g_var + geom_hline(yintercept = 0, colour = "red")
print(g_var)
#Los residuos deben ser independientes entre sí.
# Comprobación de independencia de los residuos.
cat("\nPrueba de Durbin-Watson para autocorrelaciones.")
cat("entre errores:\n")
print(durbinWatsonTest(modelo_final))
